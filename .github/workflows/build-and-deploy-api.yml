name: CI_CD_API

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'src/B3.Cdb/B3.Cdb.Site/**'
      - '.github/workflows/build-and-deploy-site.yml'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'src/B3.Cdb/B3.Cdb.Site/**'
      - '.github/workflows/build-and-deploy-site.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src/B3.Cdb
    steps:
      - uses: actions/checkout@v3
      
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        
      - name: Restore NuGet packages
        run: nuget restore B3.Cdb.sln
      
      - name: Build
        run: msbuild B3.Cdb.sln /p:Configuration=Release /p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:publishUrl=${{ github.workspace }}\publish /p:PrecompileBeforePublish=true /p:EnableUpdateable=false
      
      - name: Test
        run: dotnet test .\B3.Cdb.Test\B3.Cdb.Test.csproj --configuration Release --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
        continue-on-error: false

      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: .\src\B3.Cdb\B3.Cdb.Test\TestResults\**\*.trx
          if-no-files-found: warn

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Debug Coverage Files
        run: Get-ChildItem -Path ${{ github.workspace }}\src\B3.Cdb\B3.Cdb.Test\TestResults\ -Recurse

      - name: Locate Coverage File
        id: coverage-locator
        run: |
          $coverageFiles = Get-ChildItem -Path ${{ github.workspace }}\src\B3.Cdb\B3.Cdb.Test\TestResults\ -Recurse -Filter 'coverage.cobertura.xml' -ErrorAction SilentlyContinue
          if ($coverageFiles) {
            $coverageFiles | ForEach-Object { Write-Host "Found coverage file: $($_.FullName)" }
            echo "coverage_file=$($coverageFiles[0].FullName)" >> $env:GITHUB_ENV
          } else {
            Write-Host "No coverage files found."
            exit 1
          }

      - name: Convert Coverage Report to XML
        run: |
          reportgenerator "-reports:${{ env.coverage_file }}" "-targetdir:${{ github.workspace }}\CoverageReport" "-reporttypes:Cobertura"

      - name: List Published Files
        run: Get-ChildItem -Path ${{ github.workspace }}\publish -Recurse | Format-Table -Property FullName
     
      - name: Zip
        run: compress-archive ${{ github.workspace }}\publish\* ${{ github.workspace }}\app.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ github.workspace }}\app.zip

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./src/B3.Cdb
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1

      - name: Restore NuGet packages
        run: nuget restore B3.Cdb.sln
      
      - name: SonarQube Scan
        env:
          SONAR_HOST_URL: "http://104.248.228.214:9000/"
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet-sonarscanner begin /k:"b3-cdb-api" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}" /d:sonar.cs.vstest.reportsPaths="./**/TestResults/test-results.trx" /d:sonar.cs.opencover.reportsPaths="./CoverageReport/Cobertura.xml"
          msbuild B3.Cdb.sln
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONARQUBE_TOKEN }}"

  deploy:
    needs: [build, sonarcloud]
    runs-on: windows-latest
    steps:
      - name: Download app
        uses: actions/download-artifact@v3
        with:
          name: app
          
      - name: Deploy to App Service
        uses: azure/webapps-deploy@v2
        with: 
          app-name: "b3-cdb-api"
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_API }}
          package: ${{ github.workspace }}\app.zip
